---
- name: Minio settings
  set_fact:
    minio_hostname: "{{ storage.minio.url | urlsplit('hostname') }}"
  tags: minio

#- name: Download Minio build
#  get_url:
#    url: https://dl.min.io/server/minio/release/linux-amd64/minio
#    dest: /usr/local/bin/
#    mode: 0755
#    owner: root
#    group: root
#  retries: 5
#  tags: minio
#
#- name: Download mc build
#  get_url:
#    url: https://dl.min.io/client/mc/release/linux-amd64/mc
#    dest: /usr/local/bin/
#    mode: 0555
#    owner: root
#    group: root
#  tags: minio
#
#- name: Create the Minio config directory
#  file:
#    path: "/etc/minio/"
#    state: directory
#    owner: "root"
#    group: "root"
#    mode: 0750
#  tags: minio
#
#- name: Copy Minio config
#  template:
#    src: ../template/etc/minio/minio.conf.jinja2
#    dest: /etc/minio/minio.conf
#    owner: "root"
#    group: "root"
#    mode: 0600
#  tags: minio
#
#- name: Copy Minio sysusers
#  copy:
#    src: ../template/etc/sysusers.d/minio.conf
#    dest: /etc/sysusers.d/minio.conf
#    owner: "root"
#    group: "root"
#    mode: 0644
#  tags: minio
#
#- name: Apply Minio sysusers
#  command: systemd-sysusers
#  tags: minio
#
#- name: Create the Minio storage directory
#  file:
#    path: "{{ dirs.server.data }}/minio/"
#    state: directory
#    owner: "minio"
#    group: "minio"
#    mode: 0750
#  tags: minio
#
#- name: Create the Minio server systemd config
#  template:
#    src: ../template/etc/systemd/system/minio.service
#    dest: "/etc/systemd/system/minio.service"
#    owner: "root"
#    group: "root"
#  tags: minio
#
#- name: Enable and start the Minio service
#  service:
#    name: minio
#    state: started
#    enabled: true
#    daemon_reload: yes
#  tags: minio

- name: reconfig minio nginx configs
  template:
    src: "../template/nginx/sites-available/{{ item }}.jinja2"
    dest: "/etc/nginx/sites-available/{{ item }}"
    owner: root
    group: root
    mode: 0644
  with_items:
    - minio
  vars:
    with_certificates: false
  tags: minio

- name: reenable minio nginx configs
  file:
    src: "/etc/nginx/sites-available/{{ item }}"
    dest: "/etc/nginx/sites-enabled/{{ item }}"
    owner: root
    group: root
    mode: 0644
    state: link
  with_items:
    - minio
  tags: minio


- name: Install ovh sdk
  pip:
    name: ovh
  tags: minio

- name: Create Minio OVH DNS
  ovh_dns:
    state: present
    domain: "{{ minio_hostname.split('.')[-2:] | join('.') }}"
    name: "{{ minio_hostname.split('.')[:-2] | join('.') }}"
    type: A  # CNAME
    value: "{{ ansible_default_ipv4.address }}"
    # replace: *
    create: true
  environment:
    OVH_ENDPOINT: "{{ ovh.endpoint }}"
    OVH_APPLICATION_KEY: "{{ ovh.application_key }}"
    OVH_APPLICATION_SECRET: "{{ ovh.application_secret }}"
    OVH_CONSUMER_KEY: "{{ ovh.consumer_key }}"
  tags: minio


- name: generate minio server certbot
  command: certbot certonly --nginx -d {{ minio_hostname }} --cert-name minio --agree-tos --email {{ sysadmin.email }}
  tags: minio

- name: reconfig minio nginx configs with cert
  template:
    src: "../template/nginx/sites-available/{{ item }}.jinja2"
    dest: "/etc/nginx/sites-available/{{ item }}"
    owner: root
    group: root
    mode: 0644
  with_items:
    - minio
  vars:
    with_certificates: true
  tags: minio

- name: check nginx
  ansible.builtin.command: nginx -t
  tags: minio

- name: enable nginx
  service:
    name: nginx
    state: restarted
    enabled: true
  tags: minio
